def aStarAlgo(start_node,stop_node):
    open_set = set(start_node) #open_set:A
    closed_set = set()
    g = {} #store the distance from starting node
    parents = {}
    g[start_node] = 0
    parents[start_node] = start_node
    while len(open_set)>0:
        n = None
        for v in open_set:
            if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v
        if n == stop_node or Graph_node[n] == None:
            pass
        else:
            for (m,weight) in get_neighbors(n):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] +weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] +weight
                        parents[m] = n
                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)
        if n == None:
            print('path does not exist!')
            return None
        if  n== stop_node:
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start_node)
            path.reverse()
            print('path found:{}'.format(path))
            return path
        open_set.remove(n)
        closed_set.add(n)
    print('print doesnt exist')
    return None

def get_neighbors(v):
    if v in Graph_node:
        return Graph_node[v]
    else: 
        return None
def heuristic(n):
#     H_dist = {
#         'S':14,
#         'B':12,
#         'C':11,
#         'D':6,
#         'F':11,
#         'E':4,
#         'G':0
#     }
    H_dist = {
        'A':10,
        'B':8,
        'C':5,
        'D':7,
        'F':6,
        'E':3,
        'G':5,
        'H':3,
        'I':1,
        'J':0,
    }
    return H_dist[n]
# Graph_node = {
#     'S':[('B',4),('C',3)],
#     'B':[('F',5),('E',12)],
#     'C':[('D',7),('E',10)],
#     'D':[('E',2)],
#     'F':[('G',16)],
#     'E':[('G',5)],
# }
Graph_node = {
    'A':[('B',6),('F',3)],
    'B':[('C',3),('D',2)],
    'F':[('G',1),('H',7)],
    'C':[('E',5)],
    'D':[('E',8)],
    'E':[('I',5),('J',5)],
    'G':[('I',3)],
    'H':[('I',2)],
    'I':[('J',3)]
}

aStarAlgo('A','J')